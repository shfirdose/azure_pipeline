name: Azure Deploy


on:
  push:
    branches:
      - master
  workflow_dispatch:      

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4


#    - name: Run Super-Linter
#      uses: github/super-linter@v4
#      env: 
#        DEFAULT_BRANCH: master
#        VALIDATE_ALL_CODEBASE: true
#        GITHUB_TOKEN: ${{ secrets.VILAS_GITHUB_TOKEN }}

#sast tool 
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
#If you get 403 error in the above, then go to repository's settings, Actions, General - scroll down to give read/write permission.        

#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v2
      #with:
        # Optional. Specify a category to distinguish between multiple analyses
        # for the same tool and ref. If you don't use `category` in your workflow,
        # GitHub will generate a default category name for you
        #category: "my_category"
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    #- name: Perform CodeQL Analysis
     # #uses: github/codeql-action/analyze@46a6823b81f2d7c67ddf123851eea88365bc8a67        
      #uses: github/codeql-action/analyze@v2
      #with:
       # upload: False
        #output: sarif-results

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'  # You can specify your desired Java version here
        distribution: 'temurin' #other option distribution: 'adopt' ref. https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
        
    - name: Build with Maven
      run: mvn clean install  # Replace with your actual Maven build command

    - name: Run Maven tests
      run: mvn test  # Run Maven tests
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Dockerize application
      run: |
        docker build -t vilasvarghese/azure_pipeline .
        # Push the Docker image to a container registry if needed
        # docker push your-registry/your-image-name

    #- name: Upload coverage reports to Codecov
     # uses: codecov/codecov-action@v4.0.1
      #with:
       # token: ${{ secrets.CODECOV_TOKEN }}

    - name: Login to Docker
      uses: docker/login-action@v3
      with: 
        username: ${{ secrets.DOCKER_HUB_USERNAME }} 
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
    - name: Push to DockerHub
      run: docker push shama24/azure_pipeline
 
    - name: Azure Kubernetes set context
      uses: Azure/aks-set-context@v1
      with:
        # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
        creds: '${{secrets.AZURE_CREDENTIALS}}'
        # Resource Group Name
        resource-group: aks-demo-rg
        # AKS Cluster Name
        cluster-name: ga-aks-demo-cluster

  # Create K8s secrets to pull images
    - name: Create secret in Kubernetes cluster
      uses: Azure/k8s-create-secret@v1.1
      with:
        # Container registry url
        container-registry-url: https://index.docker.io/v1/
        # Container registry username
        container-registry-username: '${{secrets.DOCKER_HUB_USERNAME}}'
        # Container registry password
        container-registry-password:  '${{secrets.DOCKER_HUB_PASSWORD}}'
        # Type of Kubernetes secret. For example, docker-registry or generic
        secret-type: docker-registry
        # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
        secret-name: docker-image-pull-secret
        
      # Deploy to k8s cluster
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v1
      with:        
        # Path to the manifest files which will be used for deployment.
        manifests: |
          k8s/deployment.yml
          k8s/service.yml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
        images: '${{secrets.DOCKER_HUB_USERNAME}}/azure_pipeline'
        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
        imagepullsecrets: docker-image-pull-secret
        # deploy/promote/reject
        action: deploy
        
